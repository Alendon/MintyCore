#nullable enable
#pragma warning disable CS1591

namespace {{Mod.Namespace}}.Identifications;

[RegistryObjectsProvider("{{CategoryId}}")]
public class {{RegistryName}}IDs :
{{-for registryPhase in RegistryPhases -}}
{{-if registryPhase.RegisterObjects != empty -}}
I{{registryPhase.Name}}Provider,
{{-end -}}
{{-end}}
{
    {{~ for registryPhase in RegistryPhases ~}}
    
    {{~ if registryPhase.RegisterObjects == empty~}}
    {{continue}}
    {{end}}
    
    {{~ for registerObject in registryPhase.RegisterObjects ~}}
    public static global::MintyCore.Utils.Identification {{registerObject.Name}} { get; private set; }
    {{~ end ~}}
    
    internal void {{registryPhase.Name}}(global::Autofac.ILifetimeScope lifetimeScope)
    {
        var registryManager = global::Autofac.ResolutionExtensions.Resolve<global::MintyCore.Modding.IRegistryManager>(lifetimeScope);
        if (!registryManager.TryGetCategoryId("{{CategoryId}}", out var categoryId))
        {
            throw new global::System.Exception("Failed to get category (\"{{CategoryId}}\") id for {{registryPhase.Name}}");
        }
        
        var modId = global::Autofac.ResolutionExtensions.ResolveNamed<global::{{Mod.Namespace}}.{{Mod.ClassName}}>(lifetimeScope, global::MintyCore.Utils.AutofacHelper.UnsafeSelfName).ModId;
        
        {{~ for registerObject in registryPhase.RegisterObjects ~}}
        {{~ registerMethod = registerObject.RegisterMethodInfo ~}}
        {
            {{if registerObject.RegisterProperty}}
            var registerParameter = global::{{registerObject.RegisterProperty}};
            {{end}}
            
            {{if registerObject.RegisterMethod}}
            var registerParameter = global::{{registerObject.RegisterMethod}}(
            {{if registerObject.RegisterMethodParameters}}
            {{for registerMethodParameter in registerObject.RegisterMethodParameters}}
            //resolve the parameter from the lifetime scope
            lifetimeScope.Resolve<{{registerMethodParameter.Type}}>()
            {{~if !for.last}},{{end~}}
            {{end}}
            {{end}}
            );
            {{end}}
            
            var id = registryManager.RegisterObjectId(modId, categoryId, "{{registerObject.Id}}"{{if registerObject.File}}, "{{registerObject.File}}"{{end}});
            {{registerObject.Name}} = id;
            
            var registryClass = global::Autofac.ResolutionExtensions.ResolveNamed<global::{{registerMethod.Namespace}}.{{registerMethod.ClassName}}>(lifetimeScope, global::MintyCore.Utils.AutofacHelper.UnsafeSelfName);
            registryClass.{{registerMethod.MethodName}}
            {{- if registerObject.RegisterType -}}
            <global::{{registerObject.RegisterType}}>
            {{- end -}} 
            (id{{if registerObject.RegisterProperty || registerObject.RegisterMethod}}, registerParameter{{end}});
        }
        {{~ end ~}}
    }
    {{~ end ~}}
}